# Name of the workflow as shown in GitHub Actions UI
name: Expressions & Contexts

# Triggers for the workflow
on: 
  push:                # Trigger when a push happens
  pull_request:        # Trigger on PR events
  issues:              # Trigger on issue events (opened, edited, etc.)
  workflow_dispatch:   # Allows manual triggering

# Dynamic name for each run
run-name: "Expressions & Contexts by @${{ github.actor }}, event: ${{ github.event_name }}"

jobs:
  issues-prs:
    runs-on: ubuntu:latest
    if: contains(fromJson('["issues","pull_request"]'),github.event_name) #  Run this job only if the event is either 'issues' or 'pull_request'
    steps:
     - name: Run only if issue has a label
       if: contains( github.event.issue.labels.*.name,'bug') # This step only runs if the issue has a label with the name 'bug'
       run: echo ${{ join(github.event.issue.labels.*.name, ',') }} #Prints the names of all labels on the issue, joined by commas
  using-expressions-and-contexts:
    runs-on: ubuntu-latest  # Use GitHub's Ubuntu runner
    if: ${{ github.event_name=='push' }}

    steps:
      - name: Expressions
        id: expressions
        run: |
          # All of these use GitHub expressions passed to shell via echo
          echo "${{ 1 }}"                            # Prints: 1 (a number literal)
          echo "${{ 'This is a string' }}"           # Prints: This is a string
          echo "${{ null }}"                         # Prints: (blank/null)
          echo "${{ true }}"                         # Prints: true
          echo "${{ 1 > 2 }}"                        # Prints: false
          echo "${{ 'string' == 'String' }}"         # Prints: false
          echo "${{ true && false }}"                # Prints: false
          echo "${{ true || (false && true) }}"      # Prints: true
      - name: Dump Contexts
        run: |
          # Use toJson to output structured data
          echo '${{ toJson(github) }}'   # GitHub context
          echo '${{ toJson(job) }}'      # Job context
          echo '${{ toJson(secrets) }}'  # Secrets (values redacted)
          echo '${{ toJson(steps) }}'    # Step outputs
          echo '${{ toJson(runner) }}'   # Runner environment info
